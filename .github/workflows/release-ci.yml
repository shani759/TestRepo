name: Release Cutoff Enforcement and Notification

on:
  push:
    branches:
      - 'release/*'

jobs:
  release-cutoff-check:
    runs-on: ubuntu-latest
    outputs:
      proceed_with_cicd: ${{ steps.check.outputs.proceed_with_cicd }}
      cutoff: ${{ steps.cutoff.outputs.cutoff }}
      notify: ${{ steps.check.outputs.notify }}
      block_workflow: ${{ steps.check.outputs.block_workflow }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python and dependencies
        run: pip install pyyaml

      - name: Write cutoff script with enhanced debugging
        run: |
          cat << 'EOF' > cutoff_script.py
          import os
          import yaml
          import sys

          # Get the full branch reference
          raw_branch = os.environ.get('BRANCH_NAME', '')
          print(f"=== DEBUG INFO ===")
          print(f"Raw branch from BRANCH_NAME env: '{raw_branch}'")
          print(f"Raw branch type: {type(raw_branch)}")
          print(f"Raw branch length: {len(raw_branch)}")
          
          # Extract branch name from refs/heads/release/xxx format
          if raw_branch.startswith('refs/heads/'):
              branch = raw_branch.replace('refs/heads/', '')
          else:
              branch = raw_branch
          
          print(f"Extracted branch after cleanup: '{branch}'")

          # Check if config file exists
          config_file = '.release_config.yml'
          if not os.path.exists(config_file):
              print(f"ERROR: Config file '{config_file}' does not exist!")
              print("Files in current directory:")
              try:
                  files = os.listdir('.')
                  for f in sorted(files):
                      if f.startswith('.') or 'config' in f.lower() or f.endswith('.yml'):
                          print(f"  - {f}")
              except:
                  pass
              print('cutoff=9999-99-99')
              sys.exit(0)

          try:
              with open(config_file, 'r') as f:
                  content = f.read()
                  print(f"Config file content:")
                  print("--- START CONFIG ---")
                  print(content)
                  print("--- END CONFIG ---")
                  
              # Reset file pointer and load YAML
              with open(config_file, 'r') as f:
                  config = yaml.safe_load(f)
              
              print(f"YAML loaded successfully: {type(config)}")
              
              if 'releases' not in config:
                  print("ERROR: 'releases' key not found in config!")
                  print(f"Available keys: {list(config.keys()) if config else 'None'}")
                  print('cutoff=9999-99-99')
                  sys.exit(0)
                  
              releases = config['releases']
              print(f"Available release branches in config:")
              for key in releases.keys():
                  print(f"  - '{key}' (length: {len(key)})")
                  # Show each character for debugging
                  chars = [f"'{c}'" if c.isprintable() else f"\\x{ord(c):02x}" for c in key]
                  print(f"    chars: {chars}")
              
              # Show target branch characters too
              print(f"Target branch: '{branch}' (length: {len(branch)})")
              chars = [f"'{c}'" if c.isprintable() else f"\\x{ord(c):02x}" for c in branch]
              print(f"  chars: {chars}")
              
              # Try exact match first
              print(f"Looking for exact match: '{branch}'")
              if branch in releases:
                  cutoff = releases[branch].get('cutoff', None)
                  print(f"Found exact match! Cutoff: {cutoff}")
              else:
                  print(f"No exact match found for '{branch}'")
                  cutoff = None
                  
                  # Try with different formats
                  if branch.startswith('release/'):
                      version_part = branch.replace('release/', '')
                      print(f"Version part: '{version_part}'")
                      
                      # Try with 20 prefix
                      if not version_part.startswith('20') and '.' in version_part:
                          full_year_branch = f"release/20{version_part}"
                          print(f"Trying full year format: '{full_year_branch}'")
                          if full_year_branch in releases:
                              cutoff = releases[full_year_branch].get('cutoff', None)
                              print(f"Found full year match! Cutoff: {cutoff}")
              
              if cutoff:
                  print(f'cutoff={cutoff}')
              else:
                  print('cutoff=9999-99-99')
                  
          except Exception as e:
              print(f"ERROR: Exception occurred: {e}")
              import traceback
              traceback.print_exc()
              print('cutoff=9999-99-99')
          EOF

      - name: Read cutoff from metadata file
        id: cutoff
        run: |
          echo "=== RUNNING CUTOFF SCRIPT ==="
          output=$(python cutoff_script.py)
          echo "=== FULL SCRIPT OUTPUT ==="
          echo "$output"
          echo "=== EXTRACTING CUTOFF ==="
          cutoff_date=$(echo "$output" | grep 'cutoff=' | cut -d '=' -f2)
          echo "Extracted cutoff date: '$cutoff_date'"
          echo "cutoff=$cutoff_date" >> $GITHUB_OUTPUT
        env:
          BRANCH_NAME: ${{ github.ref }}

      - name: Validate cutoff presence
        run: |
          if [[ "${{ steps.cutoff.outputs.cutoff }}" == "9999-99-99" ]]; then
            echo "‚ùå Cutoff not found for branch ${{ github.ref }}"
            echo "Available branches in config should be checked above"
            exit 1
          fi

      - name: Get push timestamp and check cutoff
        id: check
        run: |
          COMMIT_DATE="${{ github.event.head_commit.timestamp }}"
          CUTOFF="${{ steps.cutoff.outputs.cutoff }}"

          COMMIT_TS=$(date -d "$COMMIT_DATE" +%s)
          CUTOFF_TS=$(date -d "$CUTOFF" +%s)

          echo "Commit date: $COMMIT_DATE"
          echo "Cutoff date: $CUTOFF"
          echo "Commit timestamp: $COMMIT_TS"
          echo "Cutoff timestamp: $CUTOFF_TS"

          if [ "$COMMIT_TS" -gt "$CUTOFF_TS" ]; then
            echo "notify=true" >> $GITHUB_OUTPUT
            echo "proceed_with_cicd=false" >> $GITHUB_OUTPUT
            echo "block_workflow=true" >> $GITHUB_OUTPUT
            echo "CI/CD blocked: commit made after cutoff $CUTOFF (commit date: $COMMIT_DATE)."
          else
            echo "notify=false" >> $GITHUB_OUTPUT
            echo "proceed_with_cicd=true" >> $GITHUB_OUTPUT
            echo "block_workflow=false" >> $GITHUB_OUTPUT
            echo "CI/CD allowed: commit made before cutoff $CUTOFF (commit date: $COMMIT_DATE)."
          fi

      - name: Create blocking issue when CI/CD is blocked
        if: steps.check.outputs.notify == 'true'
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: "üö´ CI/CD Blocked: Release Branch Past Cutoff (${{ github.ref_name }})"
          body: |
            ## üö´ CI/CD Blocked - Release Branch Past Cutoff
            **‚ö†Ô∏è AUTOMATIC BLOCK TRIGGERED**
            - **Branch:** `${{ github.ref_name }}`
            - **Cutoff Date:** `${{ steps.cutoff.outputs.cutoff }}`
            - **Commit Date:** `${{ github.event.head_commit.timestamp }}`
            - **Commit SHA:** `${{ github.sha }}`
            - **Author:** `@${{ github.actor }}`
            - **Triggered by:** [Workflow Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ---
            _This issue was automatically created by the Release Cutoff Enforcement workflow._
          assignees: |
            Zeeshan-Ajmal_spglobal
          labels: |
            release-cutoff
            blocked
            urgent

      - name: Add comment to triggering commit
        if: steps.check.outputs.notify == 'true'
        uses: peter-evans/commit-comment@v3
        with:
          token: ${{ github.token }}
          sha: ${{ github.sha }}
          body: |
            üö´ **CI/CD BLOCKED** - This commit was made after the release cutoff date (**${{ steps.cutoff.outputs.cutoff }}**).
            **Commit Date:** `${{ github.event.head_commit.timestamp }}`
            A [blocking issue has been created](https://github.com/${{ github.repository }}/issues) for review.

      - name: Block workflow if past cutoff
        if: steps.check.outputs.block_workflow == 'true'
        run: |
          echo "üö´ Workflow blocked - commit made after cutoff date"
          exit 1

  # New job to send email notification when cutoff is triggered
  send-email-notification:
    needs: release-cutoff-check
    if: needs.release-cutoff-check.outputs.notify == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Email Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: send-mail.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          inputs: |
            {
              "primary_email": "mazdaq.shahzad@spglobal.com",
              "secondary_email": "Zeeshan.Ajmal@spglobal.com"
            }

  run-ci-cd:
    needs: release-cutoff-check
    if: needs.release-cutoff-check.outputs.proceed_with_cicd == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CI/CD steps
        run: echo "‚úÖ Running CI/CD for release branch - commit made before cutoff date."
